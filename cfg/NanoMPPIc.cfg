#! /usr/bin/env python

PACKAGE='nano_mppic'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
bounds = gen.add_group("Constraints")
settings = gen.add_group("GeneralSettings")
noise = gen.add_group("NoiseGeneration")
ackermann = gen.add_group("Ackermann")
steering = gen.add_group("SteeringModel")

critics = gen.add_group("Critics")
goal_crtc = critics.add_group("Goal")
goalangle_crtc = critics.add_group("GoalAngle")
twir_crtc = critics.add_group("Twirling")
pathdist_crtc = critics.add_group("PathDist")
pathfollow_crtc = critics.add_group("PathFollow")
pathangle_crtc = critics.add_group("PathAngle")
obs_crtc = critics.add_group("Obstacles")
 
#       Name                        Type       Reconfiguration level                    Description                    Default   Min   Max
gen.add("MotionModel",              str_t,              0,              "Motion model type",                            "SteeringBased")

settings.add("num_iterations",      int_t,              0,              "Number of iterations",                         4, 1, 100)
settings.add("batch_size",          int_t,              0,              "Batch size of generated trajectories",         1000, 1, 100000)
settings.add("time_steps",          int_t,              0,              "Time steps for each gen. trajectory",          60, 1, 1000)
settings.add("num_retry",           int_t,              0,              "Number of retries when all traj. fail",        4, 1, 100)
settings.add("control_offset",      int_t,              0,              "Offset of control output",                     1, 1, 100)

settings.add("goal_tolerance",     double_t,            0,              "Goal pose tolerance",                          0.25, 0.0, 5.0)

settings.add("model_dt",           double_t,            0,              "Integration delta time",                       0.05, 1.e-5, 1.0)
settings.add("temperature",        double_t,            0,              "Temperature",                                  0.3, 1.e-5, 100.0)
settings.add("gamma",              double_t,            0,              "Gamma",                                        0.015, 1.e-5, 100.0)

bounds.add("max_vx",               double_t,            0,              "Max. longitudinal velocity",                   2.0, 0.0, 40.0)
bounds.add("min_vx",               double_t,            0,              "Min. longitudinal velocity",                   -2.0, -40.0, 0.0)
bounds.add("max_vy",               double_t,            0,              "Max. lateral velocity",                        1.0, 0.0, 40.0)
bounds.add("min_vy",               double_t,            0,              "Min. lateral velocity",                        -1.0, -40.0, 0.0)
bounds.add("max_wz",               double_t,            0,              "Max. angular velocity",                        3.0, 0.0, 40.0)
bounds.add("min_wz",               double_t,            0,              "Min. angular velocity",                        -3.0, -40.0, 0.0)

ackermann.add("min_radius",        double_t,            0,              "Minimum ackermann radius",                     3.0, 0.0, 100.0)
steering.add("length",             double_t,            0,              "Robot length",                                 1.0, 0.0, 100.0)

noise.add("std_vx",                double_t,            0,              "Noise standard deviation in Vx",               0.3, 0.0, 2.0)
noise.add("std_vy",                double_t,            0,              "Noise standard deviation in Vy",               0.3, 0.0, 2.0)
noise.add("std_wz",                double_t,            0,              "Noise standard deviation in Wz",               0.15, 0.0, 2.0)

goal_crtc.add("goal_active",       bool_t,              0,              "Activation flag",                              True)
goal_crtc.add("goal_power",        int_t,               0,              "Power of goal cost",                           1, 0, 100)
goal_crtc.add("goal_weight",       double_t,            0,              "Mult. weight of goal cost",                    1.0, 0.0, 1000.0)
goal_crtc.add("goal_threshold",    double_t,            0,              "Threshold of goal critic",                     1.5, 0.0, 10.0)

goalangle_crtc.add("goalangle_active",       bool_t,    0,              "Activation flag",                              True)
goalangle_crtc.add("goalangle_power",        int_t,     0,              "Power of goal angle cost",                     1, 0, 100)
goalangle_crtc.add("goalangle_weight",       double_t,  0,              "Mult. weight of goal angle cost",              1.0, 0.0, 1000.0)
goalangle_crtc.add("goalangle_threshold",    double_t,  0,              "Threshold of goal angle critic",               1.5, 0.0, 10.0)

twir_crtc.add("twir_active",       bool_t,              0,              "Activation flag",                              False)
twir_crtc.add("twir_power",        int_t,               0,              "Power of twirling cost",                       1, 0, 100)
twir_crtc.add("twir_weight",       double_t,            0,              "Mult. weight of twirling cost",                10.0, 0.0, 1000.0)

pathdist_crtc.add("pathdist_active",         bool_t,    0,              "Activation flag",                               False)
pathdist_crtc.add("pathdist_power",          int_t,     0,              "Power of path dist cost",                       2, 0, 100)
pathdist_crtc.add("pathdist_weight",         double_t,  0,              "Mult. weight of path dist cost",                5.0, 0.0, 1000.0)
pathdist_crtc.add("pathdist_threshold",      double_t,  0,              "Threshold of path dist critic",                 1.0, 0.0, 1000.0)
pathdist_crtc.add("pathdist_stride",         int_t,     0,              "Trajectories stride value",                     2, 1, 1000)

pathfollow_crtc.add("pathfollow_active",     bool_t,     0,              "Activation flag",                              True)
pathfollow_crtc.add("pathfollow_power",      int_t,      0,              "Power of path follow cost",                    1, 0, 100)
pathfollow_crtc.add("pathfollow_weight",     double_t,   0,              "Mult. weight of path follow cost",             10.0, 0.0, 1000.0)
pathfollow_crtc.add("pathfollow_threshold",  double_t,   0,              "Threshold of path follow critic",              1.0, 0.0, 10.0)
pathfollow_crtc.add("pathfollow_offset",     int_t,      0,              "Offset from furthest min dist point",          3, 0, 20)

pathangle_crtc.add("pathangle_active",          bool_t,     0,              "Activation flag",                              True)
pathangle_crtc.add("pathangle_power",           int_t,      0,              "Power of path angle cost",                     1, 0, 100)
pathangle_crtc.add("pathangle_weight",          double_t,   0,              "Mult. weight of path angle cost",              25.0, 0.0, 1000.0)
pathangle_crtc.add("pathangle_threshold",       double_t,   0,              "Threshold of path angle critic",               1.0, 0.0, 10.0)
pathangle_crtc.add("pathangle_offset",          int_t,      0,              "Offset from furthest min dist point",          3, 0, 20)
pathangle_crtc.add("pathangle_angle_threshold", double_t,   0,              "Max angle from robot to plan [deg]",           90.0, 0.0, 180.0)

obs_crtc.add("obs_active",                bool_t,       0,              "Activation flag",                              True)
obs_crtc.add("obs_power",                 int_t,        0,              "Power of obstacles cost",                      1, 0, 100)
obs_crtc.add("obs_weight",                double_t,     0,              "Mult. weight of obstacles cost",               20.0, 0.0, 1000.0)
obs_crtc.add("obs_repulsive_weight",      double_t,     0,              "Mult. weight of repulsive cost",               200.0, 0.0, 1000.0)
obs_crtc.add("obs_threshold",             double_t,     0,              "Goal dist threshold for repulsive cost",       1.0, 0.0, 1000.0)
obs_crtc.add("obs_collision_cost",        double_t,     0,              "Collision cost",                               100000.0, 0.0, 1.e+10)
obs_crtc.add("obs_collision_margin_dist", double_t,     0,              "Collision margin distance",                    0.6, 0.0, 5.0)

exit(gen.generate(PACKAGE, PACKAGE, "MPPIPlannerROS"))
